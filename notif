local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local Config = {
    MAX_WIDTH = 300,
    MIN_WIDTH = 200,
    CORNER_RADIUS = 12, -- Changed to match first script
    FONT = Enum.Font.FredokaOne,
    TITLE_SIZE = 28,    -- Matched to "title" TextSize in first script
    MESSAGE_SIZE = 18,  -- Matched to "creators" TextSize in first script
    DEFAULT_DURATION = 3.5,
    FADE_TIME = 0.755,
    PADDING = 18,
    MARGIN = 10,
    COLORS = {
        BACKGROUND = Color3.fromRGB(30, 30, 30), 
        TEXT = Color3.fromRGB(230, 230, 230),    
        ACCENT = Color3.fromRGB(255, 0, 80),    
        PROGRESS = Color3.fromRGB(150, 200, 255),
        GLOW = Color3.fromRGB(255, 0, 80),       
        BRIGHT_GLOW = Color3.fromRGB(255, 0, 80) 
    },
    SOUNDS = {
        SHOW = "rbxassetid://6518811702",
        HIDE = "rbxassetid://6518812167"
    }
}

local NotificationSystem = {}
local activeNotification = nil
local container = nil

local function createContainer()
    if container then return container end

    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NotificationSystem"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.Parent = playerGui

    container = Instance.new("Frame")
    container.Name = "NotificationContainer"
    container.BackgroundTransparency = 1
    container.Size = UDim2.new(1, 0, 1, 0)
    container.Parent = screenGui

    return container
end

local function animateIn(notification)
    local frame = notification.Frame
    local messageLabel = frame:WaitForChild("Message")

    RunService.Heartbeat:Wait()
    local height = messageLabel.AbsoluteSize.Y + Config.PADDING * 2

    frame.Size = UDim2.new(0, Config.MAX_WIDTH, 0, 0)
    frame.Position = UDim2.new(0.5, -Config.MAX_WIDTH/2, 0.7, 200)
    frame.BackgroundTransparency = 1

    TweenService:Create(
        frame,
        TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
        {
            Size = UDim2.new(0, Config.MAX_WIDTH, 0, height),
            Position = UDim2.new(0.5, -Config.MAX_WIDTH/2, 0.7, -height/2 + 200),
            BackgroundTransparency = 0
        }
    ):Play()

    for _, child in pairs(frame:GetDescendants()) do
        if child:IsA("TextLabel") then
            child.TextTransparency = 1
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {TextTransparency = 0}
            ):Play()
        elseif child:IsA("Frame") and child.Name == "ProgressBar" then
            child.BackgroundTransparency = 1
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 0.8}
            ):Play()
        elseif child:IsA("Frame") and child.Name:sub(1,4) == "Glow" then
            child.BackgroundTransparency = 1
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 0.4}
            ):Play()
        elseif child:IsA("Frame") and child.Name:sub(1,13) == "MovingBright" then
            child.BackgroundTransparency = 1
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 0}
            ):Play()
        end
    end

    if notification.AnimateBrightGlow then
        notification.AnimateBrightGlow()
    end
end

local function animateOut(notification, callback)
    local frame = notification.Frame

    TweenService:Create(
        frame,
        TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.In),
        {
            Size = UDim2.new(0, Config.MAX_WIDTH, 0, 0),
            Position = UDim2.new(0.5, -Config.MAX_WIDTH/2, 0.7, 200),
            BackgroundTransparency = 1
        }
    ):Play()

    for _, child in pairs(frame:GetDescendants()) do
        if child:IsA("TextLabel") then
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {TextTransparency = 1}
            ):Play()
        elseif child:IsA("Frame") and child.Name == "ProgressBar" then
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 1}
            ):Play()
        elseif child:IsA("Frame") and child.Name:sub(1,4) == "Glow" then
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 1}
            ):Play()
        elseif child:IsA("Frame") and child.Name:sub(1,13) == "MovingBright" then
            TweenService:Create(
                child,
                TweenInfo.new(Config.FADE_TIME, Enum.EasingStyle.Quint),
                {BackgroundTransparency = 1}
            ):Play()
        end
    end

    task.delay(Config.FADE_TIME, function()
        if callback then callback() end
    end)
end

local function createNotification(options)
    local message = options.message or ""
    local duration = options.duration or Config.DEFAULT_DURATION

    local frame = Instance.new("Frame")
    frame.Name = "Notification"
    frame.BackgroundColor3 = Config.COLORS.BACKGROUND
    frame.BorderSizePixel = 0
    frame.ClipsDescendants = true

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS)
    corner.Parent = frame

    local outline = Instance.new("UIStroke")
    outline.Color = Config.COLORS.ACCENT -- Pink outline
    outline.Thickness = 2
    outline.Parent = frame

    local function createGlowEdge(name, size, pos)
        local edge = Instance.new("Frame")
        edge.Name = name
        edge.BackgroundColor3 = Config.COLORS.GLOW
        edge.BackgroundTransparency = 0.4
        edge.BorderSizePixel = 0
        edge.Size = size
        edge.Position = pos
        edge.ZIndex = 3
        edge.Parent = frame
        local edgeCorner = Instance.new("UICorner")
        edgeCorner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS + 6)
        edgeCorner.Parent = edge
        for i = 1, 2 do
            local blurLayer = Instance.new("Frame")
            blurLayer.Name = name.."_Blur"..i
            blurLayer.BackgroundColor3 = Config.COLORS.GLOW
            blurLayer.BackgroundTransparency = 0.7 + 0.07*i
            blurLayer.BorderSizePixel = 0
            blurLayer.Size = size + UDim2.new(0, i*4, 0, i*4)
            blurLayer.Position = pos + UDim2.new(0, -2*i, 0, -2*i)
            blurLayer.ZIndex = 2
            blurLayer.Parent = frame
            local blurCorner = Instance.new("UICorner")
            blurCorner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS + 8 + i*2)
            blurCorner.Parent = blurLayer
        end
        return edge
    end

    local offset = math.floor(0.15 * 36)
    createGlowEdge("GlowTop", UDim2.new(1, offset*2, 0, 8), UDim2.new(0, -offset, 0, -offset-8))
    createGlowEdge("GlowBottom", UDim2.new(1, offset*2, 0, 8), UDim2.new(0, -offset, 1, offset))
    createGlowEdge("GlowLeft", UDim2.new(0, 8, 1, offset*2), UDim2.new(0, -offset-8, 0, -offset))
    createGlowEdge("GlowRight", UDim2.new(0, 8, 1, offset*2), UDim2.new(1, offset, 0, -offset))

    local AnimateBrightGlow
    do
        local movingBrightTop = Instance.new("Frame")
        movingBrightTop.Name = "MovingBrightTop"
        movingBrightTop.BackgroundColor3 = Config.COLORS.BRIGHT_GLOW
        movingBrightTop.BackgroundTransparency = 1
        movingBrightTop.BorderSizePixel = 0
        movingBrightTop.Size = UDim2.new(0, 60, 0, 8)
        movingBrightTop.Position = UDim2.new(0, -offset, 0, -offset-10)
        movingBrightTop.ZIndex = 5
        local mbtCorner = Instance.new("UICorner")
        mbtCorner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS + 8)
        mbtCorner.Parent = movingBrightTop
        movingBrightTop.Parent = frame

        local movingBrightBottom = Instance.new("Frame")
        movingBrightBottom.Name = "MovingBrightBottom"
        movingBrightBottom.BackgroundColor3 = Config.COLORS.BRIGHT_GLOW
        movingBrightBottom.BackgroundTransparency = 1
        movingBrightBottom.BorderSizePixel = 0
        movingBrightBottom.Size = UDim2.new(0, 60, 0, 8)
        movingBrightBottom.Position = UDim2.new(0, -offset, 1, offset)
        movingBrightBottom.ZIndex = 5
        local mbbCorner = Instance.new("UICorner")
        mbbCorner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS + 8)
        mbbCorner.Parent = movingBrightBottom
        movingBrightBottom.Parent = frame

        local movingBrightLeft = Instance.new("Frame")
        movingBrightLeft.Name = "MovingBrightLeft"
        movingBrightLeft.BackgroundColor3 = Config.COLORS.BRIGHT_GLOW
        movingBrightLeft.BackgroundTransparency = 1
        movingBrightLeft.BorderSizePixel = 0
        movingBrightLeft.Size = UDim2.new(0, 8, 0, 60)
        movingBrightLeft.Position = UDim2.new(0, -offset-10, 0, -offset)
        movingBrightLeft.ZIndex = 5
        local mblCorner = Instance.new("UICorner")
        mblCorner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS + 8)
        mblCorner.Parent = movingBrightLeft
        movingBrightLeft.Parent = frame

        local movingBrightRight = Instance.new("Frame")
        movingBrightRight.Name = "MovingBrightRight"
        movingBrightRight.BackgroundColor3 = Config.COLORS.BRIGHT_GLOW
        movingBrightRight.BackgroundTransparency = 1
        movingBrightRight.BorderSizePixel = 0
        movingBrightRight.Size = UDim2.new(0, 8, 0, 60)
        movingBrightRight.Position = UDim2.new(1, offset, 0, -offset)
        movingBrightRight.ZIndex = 5
        local mbrCorner = Instance.new("UICorner")
        mbrCorner.CornerRadius = UDim.new(0, Config.CORNER_RADIUS + 8)
        mbrCorner.Parent = movingBrightRight
        movingBrightRight.Parent = frame

        local runners = {
            Top = movingBrightTop,
            Bottom = movingBrightBottom,
            Left = movingBrightLeft,
            Right = movingBrightRight
        }
        local animating = true

        AnimateBrightGlow = function()
            animating = true
            coroutine.wrap(function()
                while animating and frame.Parent do
                    movingBrightTop.BackgroundTransparency = 0
                    movingBrightBottom.BackgroundTransparency = 0
                    local tw1 = TweenService:Create(
                        movingBrightTop,
                        TweenInfo.new(1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                        {Position = UDim2.new(1, offset-60, 0, -offset-10)}
                    )
                    local tw2 = TweenService:Create(
                        movingBrightBottom,
                        TweenInfo.new(1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                        {Position = UDim2.new(1, offset-60, 1, offset)}
                    )
                    tw1:Play() tw2:Play()
                    tw1.Completed:Wait()
                    movingBrightTop.BackgroundTransparency = 1
                    movingBrightBottom.BackgroundTransparency = 1
                    movingBrightTop.Position = UDim2.new(0, -offset, 0, -offset-10)
                    movingBrightBottom.Position = UDim2.new(0, -offset, 1, offset)
                    wait(0.1)
                end
            end)()
            coroutine.wrap(function()
                while animating and frame.Parent do
                    movingBrightLeft.BackgroundTransparency = 0
                    movingBrightRight.BackgroundTransparency = 0
                    local tw3 = TweenService:Create(
                        movingBrightLeft,
                        TweenInfo.new(1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                        {Position = UDim2.new(0, -offset-10, 1, offset-60)}
                    )
                    local tw4 = TweenService:Create(
                        movingBrightRight,
                        TweenInfo.new(1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                        {Position = UDim2.new(1, offset, 1, offset-60)}
                    )
                    tw3:Play() tw4:Play()
                    tw3.Completed:Wait()
                    movingBrightLeft.BackgroundTransparency = 1
                    movingBrightRight.BackgroundTransparency = 1
                    movingBrightLeft.Position = UDim2.new(0, -offset-10, 0, -offset)
                    movingBrightRight.Position = UDim2.new(1, offset, 0, -offset)
                    wait(0.1)
                end
            end)()
        end

        frame.AncestryChanged:Connect(function(_, parent)
            if not parent then
                animating = false
            end
        end)
    end

    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "Message"
    messageLabel.BackgroundTransparency = 1
    messageLabel.Size = UDim2.new(1, -Config.PADDING * 2, 0, 0)
    messageLabel.Position = UDim2.new(0, Config.PADDING, 0, Config.PADDING)
    messageLabel.Font = Config.FONT
    messageLabel.TextSize = Config.MESSAGE_SIZE
    messageLabel.TextColor3 = Config.COLORS.TEXT
    messageLabel.TextWrapped = true
    messageLabel.AutomaticSize = Enum.AutomaticSize.Y
    messageLabel.Text = message
    messageLabel.ZIndex = 4
    messageLabel.Parent = frame

    local progressBar = Instance.new("Frame")
    progressBar.Name = "ProgressBar"
    progressBar.BorderSizePixel = 0
    progressBar.BackgroundColor3 = Config.COLORS.PROGRESS
    progressBar.BackgroundTransparency = 0.8
    progressBar.Size = UDim2.new(1, 0, 0, 2)
    progressBar.Position = UDim2.new(0, 0, 1, -2)
    progressBar.ZIndex = 4
    progressBar.Parent = frame

    frame.ZIndex = 3
    frame.Parent = container

    local notification = {
        Frame = frame,
        StartTime = tick(),
        Duration = duration,
        AnimateBrightGlow = AnimateBrightGlow,
    }

    local sound = Instance.new("Sound")
    sound.SoundId = Config.SOUNDS.SHOW
    sound.Volume = 0.5
    sound.Parent = frame
    sound:Play()
    game:GetService("Debris"):AddItem(sound, 1)

    TweenService:Create(
        progressBar,
        TweenInfo.new(duration, Enum.EasingStyle.Linear),
        {Size = UDim2.new(0, 0, 0, 2)}
    ):Play()

    if activeNotification then
        NotificationSystem.close(activeNotification)
    end
    activeNotification = notification

    animateIn(notification)
    task.delay(duration, function()
        NotificationSystem.close(notification)
    end)

    return notification
end

function NotificationSystem.close(notification)
    if notification ~= activeNotification then return end

    local sound = Instance.new("Sound")
    sound.SoundId = Config.SOUNDS.HIDE
    sound.Volume = 0.5
    sound.Parent = notification.Frame
    sound:Play()

    animateOut(notification, function()
        notification.Frame:Destroy()
        activeNotification = nil
    end)
end

function NotificationSystem.init()
    createContainer()
    return NotificationSystem
end

function NotificationSystem.notify(options)
    if not container then NotificationSystem.init() end
    return createNotification(options)
end

function NotificationSystem.log(message, duration)
    return NotificationSystem.notify({
        message = message,
        duration = duration
    })
end

return setmetatable(NotificationSystem, {
    __call = function(_, ...)
        return NotificationSystem.log(...)
    end
})
